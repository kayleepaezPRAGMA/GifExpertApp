{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","cats","find","anime","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,uBAAMC,SAdW,SAAEC,GACnBA,EAAEC,iBAEFN,GAAe,SAAAO,GACX,GAAKL,EAAa,CACd,IAAMM,EAAQD,EAAWE,MAAK,SAAAC,GAAK,OAAIA,IAAUR,KAApC,YAAqFK,GAArF,CAAoDL,GAApD,mBAAmEK,IAEhF,OADAJ,EAAc,IACPK,EAEX,OAAOD,MAKX,UACI,uBACII,KAAO,OACPC,YAAc,YACdC,MAAUX,EACVY,SAvBc,SAAET,GACxBF,EAAcE,EAAEU,OAAOF,UAwBnB,6BAAMX,Q,+BChCLc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGII,MAAOF,GAHX,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEtC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAQf,EAAMgB,IAAQN,IAC3B,4BAAKA,QCHJO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAI1B,ECJ2B,SAAEA,GAE1B,MAA0BhB,mBAAU,CAChCuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA2BA,OAtBAC,qBAAW,WACbxB,EAASC,GACPwB,MAAM,SAAAC,GAEMC,YAAY,WACRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAIf,CAAEpB,IASKqB,EDzBwBM,CAAc3B,GAAnCa,EAAb,EAAQN,KAAca,EAAtB,EAAsBA,QAUtB,OACC,qCACC,6BAAMpB,IAEN,mBAAGgB,UAAU,+CAAb,SAA8DI,GAAW,gBAEzE,qBAAKJ,UAAU,YAAf,SAEEH,EAAOJ,KAAK,SAAEC,GAAF,OACX,cAAC,EAAD,eAEMA,GADGA,EAAIC,aESJiB,EAjCM,WAIjB,MAAoC5C,mBAAS,CAAC,qBAA9C,mBAAOM,EAAP,KAAmBP,EAAnB,KAEA,OAEI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAEA,6BAEQO,EAAWmB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MClBpC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e794be60.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value); //elemento sobre el que ocurriÃ³ el evento\r\n    }\r\n\r\n    const handleSubmit = ( e) => {\r\n        e.preventDefault(); // Prevenir que el navegador se refresque al hacer submit\r\n\r\n        setCategories( categories => {\r\n            if ( inputValue ) {\r\n                const cats = !categories.find(anime => anime === inputValue) ? [ inputValue, ...categories] : [...categories];\r\n                setInputValue('');\r\n                return cats;\r\n            }\r\n            return categories;\r\n        } ); \r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit } > \r\n            <input \r\n                type = \"text\"\r\n                placeholder = \"Buscar...\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n            <h1>{ inputValue }</h1>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) => {\r\n\t\t\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=jUIdQJKlgOddEtIN5HaOVDrWWMy99SwB`;\r\n    const response = await fetch( url );\r\n    const { data } = await response.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n    \r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src = { url } alt = { title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\t\r\n\t// const [images, setImages] = useState([]);\r\n\t\r\n\tconst { data:images , loading } = useFetchGifs( category );\r\n\r\n\t// console.log(data);\r\n\t// console.log(loading);\r\n\r\n\t// useEffect( () => {\r\n\t// \tgetGifs( category )\r\n\t// \t\t.then( setImages );\r\n\t// }, [ category ] );\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3>{ category }</h3>\r\n\r\n\t\t\t<p className='animate__animated animate__lightSpeedInRight'>{ loading && 'Cargando...' }</p>\r\n\r\n\t\t\t<div className=\"card-grid\">\t\t\t\t\r\n\t\t\t\t{\r\n\t\t\t\t\timages.map( ( img ) => (\r\n\t\t\t\t\t\t<GifGridItem \r\n\t\t\t\t\t\t\tkey = { img.id }\r\n\t\t\t\t\t\t\t{ ...img }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\t\t","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState( {\r\n        data: [],\r\n        loading: true,\r\n    } );\r\n\r\n    useEffect( () => {\r\n\t\tgetGifs( category )\r\n\t\t\t.then( imgs => {\r\n\r\n                setTimeout( () => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n                }, 1000);\r\n\r\n                \r\n            });\r\n\t}, [ category ] ); // Evaluar el efecto cuando la dependencia cambia\r\n\r\n    // setTimeout( () => {\r\n    //     setstate({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false,\r\n    //     });\r\n    // }, 3000);\r\n\r\n    return state; // { data: [], loading: true }\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = (  ) => {\r\n\r\n    //const [categories, setCategories] = useState(['One Punch', 'Samurai X', 'Dragon Ball']);\r\n    \r\n    const [categories, setCategories] = useState(['Kimetsu no Yaiba']);\r\n\r\n    return (\r\n\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories = { setCategories } />\r\n\r\n            <hr />\r\n\r\n            <ul>\r\n                {\r\n                    categories.map( category => \r\n                        <GifGrid \r\n                            key = { category }\r\n                            category = { category } \r\n                        />     \r\n                    )\r\n\r\n                }\r\n            </ul>\r\n\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}